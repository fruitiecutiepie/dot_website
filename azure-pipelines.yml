trigger:
  branches:
    include:
    - master

pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  PNPM_STORE_PATH: $(Pipeline.Workspace)/.pnpm-store  # Use a shared pnpm store path in the pipeline

steps:
- task: UseNode@1
  inputs:
    version: '20.x'
  displayName: 'Install Node.js'

- task: Cache@2
  inputs:
    key: 'pnpm | "$(Agent.OS)" | pnpm-lock.yaml'
    restoreKeys: |
      pnpm | "$(Agent.OS)"
    path: $(PNPM_STORE_PATH)  # Cache the pnpm store path
  displayName: Cache pnpm store

- script: |
    git config --global user.email "bot@dot-website.com"
    git config --global user.name "Dot Website CI"
    git config --global push.autoSetupRemote true
  displayName: 'Configure Git for CI'

- script: |
    npm install -g pnpm
    npm install -g @vscode/vsce
    npm install -g bumpp
  displayName: 'Install pnpm, vsce, and bumpp'

- script: |
    pnpm config set store-dir $(PNPM_STORE_PATH)  # Set the pnpm store directory to a specific path
    pnpm install
  displayName: 'Install dependencies'
  env:
    PNPM_STORE_PATH: $(PNPM_STORE_PATH)

- script: |
    set -x  # Enable detailed logging for the script
    git remote set-url origin https://$(GITHUB_PAT)@github.com/fruitiecutiepie/dot_website.git

    if [ "$(Build.Reason)" == "PullRequest" ]; then
      echo "This is a PR merge, incrementing minor version..."
      bumpp minor --commit --tag --push false --commit "Bump minor version to %s [skip ci]" --yes
      git push origin HEAD:$(Build.SourceBranchName)
    else
      echo "Direct push to master, incrementing patch version..."
      bumpp patch --commit --tag --push false --commit "Bump patch version to %s [skip ci]" --yes
      git push origin HEAD:$(Build.SourceBranchName)
    fi
    VERSION=$(node -p "require('./package.json').version")
    echo "##vso[task.setvariable variable=ExtensionVersion]$VERSION"
  displayName: 'Bump minor/patch version'
  env:
    GITHUB_PAT: $(GITHUB_PAT)
    NODE_AUTH_TOKEN: $(vsceAuthToken)

- script: |
    pnpm build
    pnpm package
  displayName: 'Build and package VSIX file'

- task: PublishPipelineArtifact@1
  name: PublishVsixArtifact
  inputs:
    targetPath: './dot-website-$(ExtensionVersion).vsix'
    artifactName: 'dot-website-$(ExtensionVersion)'
    publishLocation: 'pipeline'
  displayName: 'Publish VSIX artifact'

- script: |
    set -x  # Enable verbose output for the script
    echo "Publishing extension v$(ExtensionVersion) from $(Pipeline.Workspace)/dot-website-$(ExtensionVersion).vsix to VS Code Marketplace..."
    vsce publish --no-dependencies --allow-missing-repository --version $(ExtensionVersion) --pat $(VSCE_PAT) --verbose --skip-duplicate --packagePath $(Pipeline.Workspace)/dot-website-$(ExtensionVersion).vsix
  displayName: 'Publish to VS Code Marketplace'
  env:
    VSCE_PAT: $(VSCE_PAT)
    NODE_AUTH_TOKEN: $(vsceAuthToken)
